pawn_pst = [
   0,  0,  0,  0,  0,  0,  0,  0,
   0,  0,  0,  0,  0,  0,  0,  0,
   5,  5,  5, 10, 10,  5,  5,  5,
   5,  5, 10, 20, 20, 10,  5,  5,
  10, 10, 20, 30, 30, 30, 10, 10,
  15, 15, 25, 40, 40, 25, 15, 15,
  30, 30, 40, 50, 50, 40, 30, 30,
   0,  0,  0,  0,  0,  0,  0,  0
]

knight_pst = [
   0,  0,  0,  0,  0,  0,  0,  0,
   0,  0,  0,  0,  0,  0,  0,  0,
   5,  5,  5, 10, 10,  5,  5,  5,
   5,  5, 10, 20, 20, 10,  5,  5,
   5,  5, 10, 20, 20, 10,  5,  5,
   5,  5,  5, 10, 10,  5,  5,  5,
   0,  0,  0,  0,  0,  0,  0,  0,
   0,  0,  0,  0,  0,  0,  0,  0
]

bishop_pst = [
   0,  0,  0,  0,  0,  0,  0,  0,
   0,  0,  0,  0,  0,  0,  0,  0,
   5,  5,  5, 10, 10,  5,  5,  5,
   5,  5, 10, 20, 20, 10,  5,  5,
   5,  5, 10, 20, 20, 10,  5,  5,
   5,  5,  5, 10, 10,  5,  5,  5,
   0,  0,  0,  0,  0,  0,  0,  0,
   0,  0,  0,  0,  0,  0,  0,  0
]

rook_pst = [
   0,  0,  0,  0,  0,  0,  0,  0,
   0,  0,  0,  0,  0,  0,  0,  0,
   5,  5,  5, 10, 10,  5,  5,  5,
   5,  5,  5, 10, 10,  5,  5,  5,
   5,  5,  5, 10, 10,  5,  5,  5,
   5,  5,  5, 10, 10,  5,  5,  5,
  10, 10, 10, 10, 10, 10, 10, 10,
   5,  5,  5, 10, 10,  5,  5,  5
]

queen_pst = [
   0,  0,  0,  0,  0,  0,  0,  0,
   0,  0,  0,  0,  0,  0,  0,  0,
   0,  0,  0,  0,  0,  0,  0,  0,
   0,  0,  0,  0,  0,  0,  0,  0,
   0,  0,  0,  0,  0,  0,  0,  0,
   0,  0,  0,  0,  0,  0,  0,  0,
   0,  0,  0,  0,  0,  0,  0,  0,
   0,  0,  0,  0,  0,  0,  0,  0
]

king_pst = [
   5, 10,  0,  0,  0,  5, 10,  5,
   0,  0,  0,  0,  0,  0,  0,  0,
   0,  0,  0,  0,  0,  0,  0,  0,
   0,  0,  0,  0,  0,  0,  0,  0,
   0,  0,  0,  0,  0,  0,  0,  0,
   0,  0,  0,  0,  0,  0,  0,  0,
   0,  0,  0,  0,  0,  0,  0,  0,
   0,  0,  0,  0,  0,  0,  0,  0
]

pst = [
    None, pawn_pst, knight_pst, bishop_pst, rook_pst, queen_pst, king_pst
]

mat_vals = [
    None, 1.00, 3.25, 3.25, 5.00, 9.00, 0
]

def evaluate(board):
    score = 0
    for piece_type in range(1, 7):
        squares = board.pieces(piece_type, board.turn)
        for sq in squares:
            score += pst[piece_type][sq] * .01
            score += mat_vals[piece_type]
        squares = board.pieces(piece_type, not board.turn)
        for sq in squares:
            x = sq ^ 0x38
            score -= pst[piece_type][x] * .01
            score -= mat_vals[piece_type]

    return score
